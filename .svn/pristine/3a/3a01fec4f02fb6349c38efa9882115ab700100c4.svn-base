/*
 * TCSS 305
 * Assignment 5 ¨C PowerPaint
 */

package actions;

import gui.PowerPaintCanvas;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.geom.Ellipse2D;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JMenuBar;
import javax.swing.JPanel;



/**
 * This action class for the ellipse tool.
 * 
 * @author Qing Bai
 * @version 8 February 2015
 */
public class EllipseAction extends AbstractAction {
    
    /**
     * This is the canvas.
     */
    private final JPanel myCanvas;
    
    /**
     * This is the menu bar.
     */
    private final JMenuBar myMenuBar;
    
    /**
     * This is a ellipse.
     */
    private final Ellipse2D myEllipse;
    
    /**
     * This is x coordinate of the start point.
     */
    private int myStartX;
    
    /**
     * This is y coordinate of the start point.
     */
    private int myStartY;
    
    /**
     * This is a constructor used to create an action that can perform actions on a given 
     * JPanel which acts as a canvas.
     * 
     * @param theCanvas is the given JPenel object which acts as a canvas
     * @param theMenuBar is the menu bar in this program
     */
    public EllipseAction(final JPanel theCanvas, final JMenuBar theMenuBar) {
        super();
        putValue(Action.NAME, "Ellipse");
        putValue(Action.SMALL_ICON, new ImageIcon("images/ellipse_bw.gif"));
        putValue(Action.MNEMONIC_KEY, KeyEvent.VK_E);
        myCanvas = theCanvas;
        myMenuBar = theMenuBar;
        myStartX = 0;
        myStartY = 0;
        myEllipse = new Ellipse2D.Double();
    }

    /**
     * This method allows clients to draw ellipses.
     * 
     * @param theEvent is the event
     */
    public void actionPerformed(final ActionEvent theEvent) {
        
        myCanvas.addMouseListener(new MouseAdapter() {
            public void mousePressed(final MouseEvent theEvent) {
                myStartX = theEvent.getX();
                myStartY = theEvent.getY();
                myEllipse.setFrame(myStartX, myStartY, 0, 0);
            }
            
            public void mouseReleased(final MouseEvent theEvent) {
                final Ellipse2D elliCopy = (Ellipse2D.Double) myEllipse.clone();
                ((PowerPaintCanvas) myCanvas).addCurrentDrawing(elliCopy);
                myMenuBar.getMenu(0).getItem(0).setEnabled(true);
            }
        });
        
        myCanvas.addMouseMotionListener(new MouseAdapter() {
            public void mouseDragged(final MouseEvent theEvent) {
                final int topLeftX = Math.min(myStartX, (int) theEvent.getX());
                final int topLeftY = Math.min(myStartY, (int) theEvent.getY());
                final int bottomRightX = Math.max(myStartX, (int) theEvent.getX());
                final int bottomRightY = Math.max(myStartY, (int) theEvent.getY());
                
                myEllipse.setFrame(topLeftX, topLeftY, bottomRightX - topLeftX, 
                    bottomRightY - topLeftY);
                ((PowerPaintCanvas) myCanvas).setCurrentDrawing(myEllipse);
                myCanvas.repaint();
            }
        });
    }

}
